"use strict";

exports.__esModule = true;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _shipitUtils = _interopRequireDefault(require("shipit-utils"));

var _chalk = _interopRequireDefault(require("chalk"));

var _tmpPromise = _interopRequireDefault(require("tmp-promise"));

var _extendShipit = _interopRequireDefault(require("../../extendShipit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Fetch task.
 * - Create workspace.
 * - Fetch repository.
 * - Checkout commit-ish.
 */
const fetchTask = shipit => {
  _shipitUtils.default.registerTask(shipit, 'deploy:fetch',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    (0, _extendShipit.default)(shipit);
    /**
     * Create workspace.
     */

    function createWorkspace() {
      return _createWorkspace.apply(this, arguments);
    }
    /**
     * Initialize repository.
     */


    function _createWorkspace() {
      _createWorkspace = _asyncToGenerator(function* () {
        function create() {
          return _create.apply(this, arguments);
        }

        function _create() {
          _create = _asyncToGenerator(function* () {
            shipit.log('Create workspace...');
            /* eslint-disable no-param-reassign */

            if (shipit.config.shallowClone) {
              const tmpDir = yield _tmpPromise.default.dir({
                mode: '0755'
              });
              shipit.workspace = tmpDir.path;
            } else {
              shipit.workspace = shipit.config.workspace;

              if (_path.default.resolve(shipit.workspace) === process.cwd()) {
                throw new Error('Workspace should be a temporary directory');
              }
            }
            /* eslint-enable no-param-reassign */


            shipit.log(_chalk.default.green(`Workspace created: "${shipit.workspace}"`));
          });
          return _create.apply(this, arguments);
        }

        return create();
      });
      return _createWorkspace.apply(this, arguments);
    }

    function initRepository() {
      return _initRepository.apply(this, arguments);
    }
    /**
     * Set git config.
     */


    function _initRepository() {
      _initRepository = _asyncToGenerator(function* () {
        shipit.log('Initialize local repository in "%s"', shipit.workspace);
        yield shipit.local('git init', {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Repository initialized.'));
      });
      return _initRepository.apply(this, arguments);
    }

    function setGitConfig() {
      return _setGitConfig.apply(this, arguments);
    }
    /**
     * Add remote.
     */


    function _setGitConfig() {
      _setGitConfig = _asyncToGenerator(function* () {
        if (!shipit.config.gitConfig) return;
        shipit.log('Set custom git config options for "%s"', shipit.workspace);
        yield Promise.all(Object.keys(shipit.config.gitConfig || {}).map(key => shipit.local(`git config ${key} "${shipit.config.gitConfig[key]}"`, {
          cwd: shipit.workspace
        })));
        shipit.log(_chalk.default.green('Git config set.'));
      });
      return _setGitConfig.apply(this, arguments);
    }

    function addRemote() {
      return _addRemote.apply(this, arguments);
    }
    /**
     * Fetch repository.
     */


    function _addRemote() {
      _addRemote = _asyncToGenerator(function* () {
        shipit.log('List local remotes.');
        const res = yield shipit.local('git remote', {
          cwd: shipit.workspace
        });
        const remotes = res.stdout ? res.stdout.split(/\s/) : [];
        const method = remotes.indexOf('shipit') !== -1 ? 'set-url' : 'add';
        shipit.log('Update remote "%s" to local repository "%s"', shipit.config.repositoryUrl, shipit.workspace); // Update remote.

        yield shipit.local(`git remote ${method} shipit ${shipit.config.repositoryUrl}`, {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Remote updated.'));
      });
      return _addRemote.apply(this, arguments);
    }

    function fetch() {
      return _fetch.apply(this, arguments);
    }
    /**
     * Checkout commit-ish.
     */


    function _fetch() {
      _fetch = _asyncToGenerator(function* () {
        let fetchCommand = 'git fetch shipit --prune';
        const fetchDepth = shipit.config.shallowClone ? ' --depth=1' : ''; // fetch branches and tags separate to be compatible with git versions < 1.9

        fetchCommand += `${fetchDepth} && ${fetchCommand} "refs/tags/*:refs/tags/*"`;
        shipit.log('Fetching repository "%s"', shipit.config.repositoryUrl);
        yield shipit.local(fetchCommand, {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Repository fetched.'));
      });
      return _fetch.apply(this, arguments);
    }

    function checkout() {
      return _checkout.apply(this, arguments);
    }
    /**
     * Hard reset of working tree.
     */


    function _checkout() {
      _checkout = _asyncToGenerator(function* () {
        shipit.log('Checking out commit-ish "%s"', shipit.config.branch);
        yield shipit.local(`git checkout ${shipit.config.branch}`, {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Checked out.'));
      });
      return _checkout.apply(this, arguments);
    }

    function reset() {
      return _reset.apply(this, arguments);
    }
    /**
     * Merge branch.
     */


    function _reset() {
      _reset = _asyncToGenerator(function* () {
        shipit.log('Resetting the working tree');
        yield shipit.local('git reset --hard HEAD', {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Reset working tree.'));
      });
      return _reset.apply(this, arguments);
    }

    function merge() {
      return _merge.apply(this, arguments);
    }
    /**
     * update submodules
     */


    function _merge() {
      _merge = _asyncToGenerator(function* () {
        shipit.log('Testing if commit-ish is a branch.');
        const res = yield shipit.local(`git branch --list ${shipit.config.branch}`, {
          cwd: shipit.workspace
        });
        const isBranch = !!res.stdout;

        if (!isBranch) {
          shipit.log(_chalk.default.green('No branch, no merge.'));
          return;
        }

        shipit.log('Commit-ish is a branch, merging...'); // Merge branch.

        yield shipit.local(`git merge shipit/${shipit.config.branch}`, {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Branch merged.'));
      });
      return _merge.apply(this, arguments);
    }

    function updateSubmodules() {
      return _updateSubmodules.apply(this, arguments);
    }

    function _updateSubmodules() {
      _updateSubmodules = _asyncToGenerator(function* () {
        if (!shipit.config.updateSubmodules) return;
        shipit.log('Updating submodules.');
        yield shipit.local('git submodule update --init --recursive', {
          cwd: shipit.workspace
        });
        shipit.log(_chalk.default.green('Submodules updated'));
      });
      return _updateSubmodules.apply(this, arguments);
    }

    yield createWorkspace();

    if (shipit.config.repositoryUrl) {
      yield initRepository();
      yield setGitConfig();
      yield addRemote();
      yield fetch();
      yield checkout();
      yield reset();
      yield merge();
      yield updateSubmodules();
    } else {
      shipit.log(_chalk.default.yellow('Skip fetching repo. No repositoryUrl provided'));
    }

    shipit.emit('fetched');
  }));
};

var _default = fetchTask;
exports.default = _default;