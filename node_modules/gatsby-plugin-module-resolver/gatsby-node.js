'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var path = require('path');

exports.onCreateWebpackConfig = function (_ref, pluginOptions) {
  var actions = _ref.actions,
      getConfig = _ref.getConfig;

  // get Gatsby's config
  var config = getConfig();
  // trim and replace
  var clear = function clear(p) {
    return p.replace('./', '').trim();
  };
  var hasOptions = Object.keys(pluginOptions).filter(function (item) {
    return item !== 'plugins';
  }).length;

  // whether there is any option or not
  if (hasOptions) {
    var plugins = pluginOptions.plugins,
        options = _objectWithoutProperties(pluginOptions, ['plugins']);
    // get user specified root dir


    var rootDir = options.root || './';
    // build the root dir
    var mainRoot = path.join(config.context, clear(rootDir));
    // create an empty alias object
    var alias = {};
    // create the alias with the params that specified
    var createAlias = function createAlias(value, root) {
      var finalValue = value;
      if (finalValue.startsWith('./')) {
        finalValue = clear(finalValue);
      }
      return root + '/' + finalValue;
    };

    // clear paths and add to the alias object
    Object.keys(options.aliases).map(function (opt) {
      var value = options.aliases[opt];

      // check if the value is an object
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        var childRoot = path.join(config.context, clear(value.root));
        alias[opt] = createAlias(value.alias, childRoot || mainRoot);
      } else {
        alias[opt] = createAlias(options.aliases[opt], mainRoot);
      }
    });

    // set Webpack config
    actions.setWebpackConfig({
      resolve: {
        alias: alias
      }
    });
  }
};